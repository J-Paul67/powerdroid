#!/usr/bin/python2.4
# -*- coding: us-ascii -*-
# vim:ts=2:sw=2:softtabstop=0:tw=74:smarttab:expandtab
# $Id$
#
# Copyright The Android Open Source Project
#

"""Take measurements.

"""


import sys

from pycopia import getopt
from pycopia import timespec

from droid.measure import core
from droid.measure import sequencer
from droid.instruments import core as instrumentcore



def main(argv):
  """Take various measurements.

  Usage:
    pdmeasure [options] <measurementmode>...

  Options:
    Measurement mode (Voltage, Current, Battery, Recharge). Multiple
      measurements may be taken by specifying a comma separated list.
      Optional period may also be supplied with colon. e.g.:
          curr:fast,volt:30
          Means measure current fast as possible, voltage every 30 seconds.

    -r  Current range to measure current at (maximum expected value).
        The special values "high", "medium", and "low" may also be used.
    -f  Default report file name (default stdout).
    -t  Total time span to measure, expressed as time values (e.g. "30s").

    -p  Show progress.

    -l  enable triggered mode, and set Level to trigger at.

    -V  Voltage to use (default 3.8V) when measuring current.
    -I  Print instrument identity and exit.
    -R  Reset the instrument before running the tests. This may reset the DUT.
    -C  Clear the GPIB bus, then exit.
    -d  Turn on debugging.
    -h  This help text.

  Time values are number-unit combinations such as "1m" for one minute, or
  "2h" for two hours.
  """

  measuremodes = []
  clear = False
  identify = False
  verbose = False
  try:
    opts, longopts, args = getopt.getopt(argv[1:], 
        "h?vdpRCIm:t:f:V:s:l:r:")
  except getopt.GetoptError, err:
    print >>sys.stderr, err
    return

  if not args:
    print argv[0], ":"
    print main.__doc__
    return

  ctx = core.MeasurementContext()
  ctx.evalupdate(longopts)

  for opt, optarg in opts:
    if opt in ("-h", "-?"):
      print argv[0], ":"
      print main.__doc__
      return
    elif opt == "-f":
      ctx.datafilename = optarg
    elif opt == "-C":
      clear = True
    elif opt == "-I":
      identify = True
    elif opt == "-v":
      verbose = True
    elif opt == "-d":
      from pycopia import autodebug
    # measurement context shortcuts
    elif opt == "-V":
      ctx.powersupplies.voltage = float(optarg)
    elif opt == "-r":
      ctx.powersupplies.maxcurrent = optarg
    elif opt == "-R":
      ctx.reset = True
    elif opt == "-p":
      ctx.useprogress = True
    elif opt == "-l":
      ctx.trigger.level = float(optarg)
      ctx.triggered = True
    elif opt in ("-t",  "-s"):
      ctx.timespan = timespec.parse_timespan(optarg)
    elif opt == "-m":
      ctx.capturemode = optarg[0].upper()

  if verbose:
    logfile = sys.stdout
  else:
    logfile = None

  if clear:
    device = instrumentcore.GetInstrument(args[0], logfile=logfile)
    device.clear()
    device.close()
    return

  if identify:
    device = instrumentcore.GetInstrument(args[0], logfile=logfile)
    print device.identify()
    device.close()
    return

  try:
    sequencer.RunMeasureSpec(ctx, ",".join(args))
  except KeyboardInterrupt:
    pass
  print

main(sys.argv)

